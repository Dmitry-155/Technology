// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Technology.WebPortal.DAL;

namespace Technology.WebPortal.Migrations
{
    [DbContext(typeof(EmployeeDbContext))]
    [Migration("20200610184953_Add issues")]
    partial class Addissues
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Technology.WebPortal.Models.Attachment", b =>
                {
                    b.Property<int>("AttachmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttachmentID");

                    b.HasIndex("CommentID");

                    b.ToTable("Attachments");

                    b.HasData(
                        new
                        {
                            AttachmentID = 1,
                            CommentID = 1,
                            Content = new byte[] { 0 },
                            FileName = "скриншот.png"
                        },
                        new
                        {
                            AttachmentID = 2,
                            CommentID = 2,
                            Content = new byte[] { 0 },
                            FileName = "описание ошибки.png"
                        },
                        new
                        {
                            AttachmentID = 3,
                            CommentID = 3,
                            Content = new byte[] { 0 },
                            FileName = "проблема.png"
                        });
                });

            modelBuilder.Entity("Technology.WebPortal.Models.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployerID")
                        .HasColumnType("int");

                    b.Property<int>("IssueID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentID");

                    b.HasIndex("EmployerID");

                    b.HasIndex("IssueID");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentID = 1,
                            Date = new DateTime(2020, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployerID = 2,
                            IssueID = 1,
                            Text = "Проблема с сетью, не работает интернет. Скриншот приложен"
                        },
                        new
                        {
                            CommentID = 2,
                            Date = new DateTime(2020, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployerID = 5,
                            IssueID = 2,
                            Text = "Проблема с компьютером, не могу включить. Скриншот приложен"
                        },
                        new
                        {
                            CommentID = 3,
                            Date = new DateTime(2020, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployerID = 4,
                            IssueID = 3,
                            Text = "Помогите оформить справку 2-НДФЛ"
                        },
                        new
                        {
                            CommentID = 4,
                            Date = new DateTime(2020, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployerID = 6,
                            IssueID = 1,
                            Text = "Проверяю ваши сетевые настройки"
                        },
                        new
                        {
                            CommentID = 5,
                            Date = new DateTime(2020, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployerID = 6,
                            IssueID = 2,
                            Text = "Задача в работе. Смогу через час посмотреть компьютер."
                        },
                        new
                        {
                            CommentID = 6,
                            Date = new DateTime(2020, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployerID = 7,
                            IssueID = 3,
                            Text = "Задача взята в работу. Справка будет в понедельник."
                        });
                });

            modelBuilder.Entity("Technology.WebPortal.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MidName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            Address = "Москва",
                            Department = "Отдел разработки",
                            Designation = "Разработчик",
                            MidName = "Игоревич",
                            Name = "Иван",
                            Phone = "001-1102",
                            SurName = "Петров"
                        },
                        new
                        {
                            EmployeeId = 2,
                            Address = "Москва",
                            Department = "Отдел аналитики",
                            Designation = "Аналитик",
                            MidName = "Ивановна",
                            Name = "Марина",
                            Phone = "001-1122",
                            SurName = "Ковалева"
                        },
                        new
                        {
                            EmployeeId = 3,
                            Address = "Москва",
                            Department = "Отдел сопровождения",
                            Designation = "Сопровождение",
                            MidName = "Семенович",
                            Name = "Анатолий",
                            Phone = "001-1134",
                            SurName = "Павлов"
                        },
                        new
                        {
                            EmployeeId = 4,
                            Address = "Москва",
                            Department = "Группа тестирования",
                            Designation = "Тестировщик",
                            MidName = "Алексеевич",
                            Name = "Дмитрий",
                            Phone = "001-1187",
                            SurName = "Загребин"
                        },
                        new
                        {
                            EmployeeId = 5,
                            Address = "Москва",
                            Department = "Бухгалтерия",
                            Designation = "Бухгалтер",
                            MidName = "Владимировна",
                            Name = "Дарья",
                            Phone = "001-1191",
                            SurName = "Васильева"
                        },
                        new
                        {
                            EmployeeId = 6,
                            Address = "Москва",
                            Department = "ИТ поддержка",
                            Designation = "Специалист ИТ",
                            MidName = "Петрович",
                            Name = "Василий",
                            Phone = "001-1223",
                            SurName = "Кулешов"
                        },
                        new
                        {
                            EmployeeId = 7,
                            Address = "Москва",
                            Department = "Фин поддержка",
                            Designation = "Финансовый консультант",
                            MidName = "Викторович",
                            Name = "Игорь",
                            Phone = "001-1401",
                            SurName = "Семенов"
                        });
                });

            modelBuilder.Entity("Technology.WebPortal.Models.Issue", b =>
                {
                    b.Property<int>("IssueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExecutorID")
                        .HasColumnType("int");

                    b.Property<int>("IssueCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IssueID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("ExecutorID");

                    b.HasIndex("IssueCategoryID");

                    b.ToTable("Issues");

                    b.HasData(
                        new
                        {
                            IssueID = 1,
                            AuthorID = 2,
                            Description = "Сетевая проблема",
                            ExecutorID = 6,
                            IssueCategoryID = 1,
                            Number = "IT-0001"
                        },
                        new
                        {
                            IssueID = 2,
                            AuthorID = 5,
                            Description = "Проблема с компьютером",
                            ExecutorID = 6,
                            IssueCategoryID = 1,
                            Number = "IT-0002"
                        },
                        new
                        {
                            IssueID = 3,
                            AuthorID = 4,
                            Description = "Оформление справки",
                            ExecutorID = 7,
                            IssueCategoryID = 2,
                            Number = "FIN-0001"
                        });
                });

            modelBuilder.Entity("Technology.WebPortal.Models.IssueCategory", b =>
                {
                    b.Property<int>("IssueCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("IssueCategoryID");

                    b.ToTable("IssueCategories");

                    b.HasData(
                        new
                        {
                            IssueCategoryID = 1,
                            Description = "IT Service Desk",
                            Type = 1
                        },
                        new
                        {
                            IssueCategoryID = 2,
                            Description = "Fin Support",
                            Type = 2
                        });
                });

            modelBuilder.Entity("Technology.WebPortal.Models.Attachment", b =>
                {
                    b.HasOne("Technology.WebPortal.Models.Comment", "Comment")
                        .WithMany("Attachments")
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Technology.WebPortal.Models.Comment", b =>
                {
                    b.HasOne("Technology.WebPortal.Models.Employee", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Technology.WebPortal.Models.Issue", "Issue")
                        .WithMany("Comments")
                        .HasForeignKey("IssueID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Technology.WebPortal.Models.Issue", b =>
                {
                    b.HasOne("Technology.WebPortal.Models.Employee", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Technology.WebPortal.Models.Employee", "Executor")
                        .WithMany()
                        .HasForeignKey("ExecutorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Technology.WebPortal.Models.IssueCategory", "IssueCategory")
                        .WithMany()
                        .HasForeignKey("IssueCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
